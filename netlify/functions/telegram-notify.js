const TELEGRAM_BOT_TOKEN = '8073830189:AAH4P8m1im6RTSIXpG859e9bQBGetjcvdmY';
const CHAT_IDS = ['923730033', '761026351', '432380172']; // –î–æ–¥–∞–π—Ç–µ –±—ñ–ª—å—à–µ chat_id –∑–∞ –ø–æ—Ç—Ä–µ–±–∏

exports.handler = async (event, context) => {
  // –î–æ–∑–≤–æ–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ POST –∑–∞–ø–∏—Ç–∏
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type',
        'Access-Control-Allow-Methods': 'POST, OPTIONS'
      },
      body: JSON.stringify({ error: 'Method not allowed' })
    };
  }

  // –û–±—Ä–æ–±–ª—è—î–º–æ CORS preflight –∑–∞–ø–∏—Ç–∏
  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 200,
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type',
        'Access-Control-Allow-Methods': 'POST, OPTIONS'
      },
      body: ''
    };
  }

  try {
    // –õ–æ–≥—É—î–º–æ —Å–∏—Ä—ñ –¥–∞–Ω—ñ —â–æ –ø—Ä–∏–π—à–ª–∏
    console.log('üîç –°–∏—Ä—ñ –¥–∞–Ω—ñ event.body:', event.body);
    console.log('üîç –¢–∏–ø event.body:', typeof event.body);

    // –ü–∞—Ä—Å–∏–º–æ –¥–∞–Ω—ñ
    let orderData;
    try {
      orderData = JSON.parse(event.body);
      console.log('‚úÖ –£—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ø–∞—Ä—Å–∏–ª–∏ JSON:', orderData);
    } catch (parseError) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON:', parseError.message);
      return {
        statusCode: 400,
        headers: {
          'Access-Control-Allow-Origin': '*',
          'Access-Control-Allow-Headers': 'Content-Type'
        },
        body: JSON.stringify({ 
          success: false,
          error: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π JSON',
          details: parseError.message
        })
      };
    }

    // –í–∏—Ç—è–≥—É—î–º–æ –¥–∞–Ω—ñ –∑ –±–µ–∑–ø–µ—á–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    const { 
      fullName = '–ù–µ –≤–∫–∞–∑–∞–Ω–æ', 
      phone = '–ù–µ –≤–∫–∞–∑–∞–Ω–æ', 
      contact = '–ù–µ –≤–∫–∞–∑–∞–Ω–æ', 
      city = '–ù–µ –≤–∫–∞–∑–∞–Ω–æ', 
      branch = '–ù–µ –≤–∫–∞–∑–∞–Ω–æ', 
      orderSummary = '–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ', 
      totalSum = '0', 
      comments = '', 
      paymentMethod = '–ù–µ –≤–∫–∞–∑–∞–Ω–æ',
      orderId = null
    } = orderData;

    // –õ–æ–≥—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ
    console.log('üìã –û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', {
      fullName,
      phone,
      contact,
      city,
      branch,
      orderSummary: orderSummary.substring(0, 100) + '...', // –°–∫–æ—Ä–æ—á–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –¥–ª—è –ª–æ–≥—É
      totalSum,
      comments,
      paymentMethod,
      orderId
    });

    // –§–æ—Ä–º—É—î–º–æ –∫—Ä–∞—Å–∏–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –µ–º–æ–¥–∑—ñ
    const message = `üîî <b>–ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø MIVA!</b>

üë§ <b>–ö–ª—ñ—î–Ω—Ç:</b> ${fullName}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone}
üìß <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> ${contact}

üìç <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b>
üèôÔ∏è <b>–ú—ñ—Å—Ç–æ:</b> ${city}
üì¶ <b>–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è:</b> ${branch}

üõèÔ∏è <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>
${orderSummary}

üí∞ <b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:</b> ${totalSum} –≥—Ä–Ω
üí≥ <b>–°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:</b> ${paymentMethod}
${orderId ? `üÜî <b>ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> ${orderId}\n` : ''}${comments ? `üí¨ <b>–ö–æ–º–µ–Ω—Ç–∞—Ä –∫–ª—ñ—î–Ω—Ç–∞:</b>\n${comments}\n\n` : ''}‚ö†Ô∏è <b>–í–ê–ñ–õ–ò–í–û:</b> –ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∫–ª—ñ—î–Ω—Ç–æ–º –ø—Ä–æ—Ç—è–≥–æ–º 2 –≥–æ–¥–∏–Ω!

‚è∞ <b>–ß–∞—Å:</b> ${new Date().toLocaleString('uk-UA', { timeZone: 'Europe/Kiev' })}`;

    // –õ–æ–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é
    console.log('üì§ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é:', message);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –ø–æ—Ä–æ–∂–Ω—î —Ç–∞ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å undefined
    if (!message || message.includes('undefined') || message.trim() === '') {
      console.error('‚ö†Ô∏è –ü–æ—Ä–æ–∂–Ω—î –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!');
      return {
        statusCode: 400,
        headers: {
          'Access-Control-Allow-Origin': '*',
          'Access-Control-Allow-Headers': 'Content-Type'
        },
        body: JSON.stringify({ 
          success: false,
          error: '–ü–æ—Ä–æ–∂–Ω—î –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'
        })
      };
    }

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram
    const sendTelegramMessage = async (message) => {
      const sendPromises = CHAT_IDS.map(async (chatId) => {
        try {
          console.log(`üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ chat_id ${chatId}...`);
          
          const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              chat_id: chatId,
              text: message,
              parse_mode: 'HTML'
            })
          });

          const result = await response.json();
          
          // –õ–æ–≥—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Ç—É
          console.log(`üìä –í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è chat_id ${chatId}:`, {
            status: response.status,
            ok: response.ok,
            data: result
          });
          
          if (!response.ok) {
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–æ chat_id ${chatId}:`, {
              status: response.status,
              error: result.description || result.error_code,
              fullResponse: result
            });
            return { chatId, success: false, error: result.description || 'Unknown error' };
          }

          console.log(`‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ chat_id ${chatId}`);
          return { chatId, success: true, messageId: result.result?.message_id };
          
        } catch (error) {
          console.error(`‚ùå –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –¥–æ chat_id ${chatId}:`, {
            error: error.message,
            stack: error.stack
          });
          return { chatId, success: false, error: error.message };
        }
      });

      return await Promise.all(sendPromises);
    };

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    const results = await sendTelegramMessage(message);
    
    // –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    const successful = results.filter(r => r.success).length;
    const failed = results.filter(r => !r.success).length;

    console.log(`üìä –ü—ñ–¥—Å—É–º–æ–∫ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω—å: ${successful} —É—Å–ø—ñ—à–Ω–∏—Ö, ${failed} –Ω–µ–≤–¥–∞–ª–∏—Ö`);
    
    // –õ–æ–≥—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    results.forEach(result => {
      if (result.success) {
        console.log(`‚úÖ Chat ID ${result.chatId}: —É—Å–ø—ñ—à–Ω–æ (message_id: ${result.messageId || 'N/A'})`);
      } else {
        console.error(`‚ùå Chat ID ${result.chatId}: –ø–æ–º–∏–ª–∫–∞ - ${result.error}`);
      }
    });

    return {
      statusCode: 200,
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type'
      },
      body: JSON.stringify({
        status: "ok",
        success: true,
        message: `–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successful} —É—Å–ø—ñ—à–Ω–∏—Ö, ${failed} –Ω–µ–≤–¥–∞–ª–∏—Ö`,
        results: results,
        totalSent: successful,
        totalFailed: failed
      })
    };

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:', {
      error: error.message,
      stack: error.stack,
      body: event.body
    });
    
    return {
      statusCode: 500,
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type'
      },
      body: JSON.stringify({ 
        success: false,
        error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: error.message
      })
    };
  }
};